/**
 * QAN AutoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResponseTransaction model module.
 * @module model/ResponseTransaction
 * @version 0.0.1
 */
class ResponseTransaction {
    /**
     * Constructs a new <code>ResponseTransaction</code>.
     * @alias module:model/ResponseTransaction
     */
    constructor() { 
        
        ResponseTransaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResponseTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResponseTransaction} obj Optional instance to populate.
     * @return {module:model/ResponseTransaction} The populated <code>ResponseTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResponseTransaction();

            if (data.hasOwnProperty('AccessList')) {
                obj['AccessList'] = ApiClient.convertToType(data['AccessList'], 'String');
            }
            if (data.hasOwnProperty('BlockHash')) {
                obj['BlockHash'] = ApiClient.convertToType(data['BlockHash'], 'String');
            }
            if (data.hasOwnProperty('BlockNumber')) {
                obj['BlockNumber'] = ApiClient.convertToType(data['BlockNumber'], 'String');
            }
            if (data.hasOwnProperty('ChainId')) {
                obj['ChainId'] = ApiClient.convertToType(data['ChainId'], 'String');
            }
            if (data.hasOwnProperty('From')) {
                obj['From'] = ApiClient.convertToType(data['From'], 'String');
            }
            if (data.hasOwnProperty('Gas')) {
                obj['Gas'] = ApiClient.convertToType(data['Gas'], 'String');
            }
            if (data.hasOwnProperty('GasPrice')) {
                obj['GasPrice'] = ApiClient.convertToType(data['GasPrice'], 'String');
            }
            if (data.hasOwnProperty('Hash')) {
                obj['Hash'] = ApiClient.convertToType(data['Hash'], 'String');
            }
            if (data.hasOwnProperty('Input')) {
                obj['Input'] = ApiClient.convertToType(data['Input'], 'String');
            }
            if (data.hasOwnProperty('MaxFeePerGas')) {
                obj['MaxFeePerGas'] = ApiClient.convertToType(data['MaxFeePerGas'], 'String');
            }
            if (data.hasOwnProperty('MaxPriorityFeePerGas')) {
                obj['MaxPriorityFeePerGas'] = ApiClient.convertToType(data['MaxPriorityFeePerGas'], 'String');
            }
            if (data.hasOwnProperty('Nonce')) {
                obj['Nonce'] = ApiClient.convertToType(data['Nonce'], 'String');
            }
            if (data.hasOwnProperty('R')) {
                obj['R'] = ApiClient.convertToType(data['R'], 'String');
            }
            if (data.hasOwnProperty('S')) {
                obj['S'] = ApiClient.convertToType(data['S'], 'String');
            }
            if (data.hasOwnProperty('To')) {
                obj['To'] = ApiClient.convertToType(data['To'], 'String');
            }
            if (data.hasOwnProperty('TransactionIndex')) {
                obj['TransactionIndex'] = ApiClient.convertToType(data['TransactionIndex'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('V')) {
                obj['V'] = ApiClient.convertToType(data['V'], 'String');
            }
            if (data.hasOwnProperty('Value')) {
                obj['Value'] = ApiClient.convertToType(data['Value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResponseTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResponseTransaction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AccessList'] && !(typeof data['AccessList'] === 'string' || data['AccessList'] instanceof String)) {
            throw new Error("Expected the field `AccessList` to be a primitive type in the JSON string but got " + data['AccessList']);
        }
        // ensure the json data is a string
        if (data['BlockHash'] && !(typeof data['BlockHash'] === 'string' || data['BlockHash'] instanceof String)) {
            throw new Error("Expected the field `BlockHash` to be a primitive type in the JSON string but got " + data['BlockHash']);
        }
        // ensure the json data is a string
        if (data['BlockNumber'] && !(typeof data['BlockNumber'] === 'string' || data['BlockNumber'] instanceof String)) {
            throw new Error("Expected the field `BlockNumber` to be a primitive type in the JSON string but got " + data['BlockNumber']);
        }
        // ensure the json data is a string
        if (data['ChainId'] && !(typeof data['ChainId'] === 'string' || data['ChainId'] instanceof String)) {
            throw new Error("Expected the field `ChainId` to be a primitive type in the JSON string but got " + data['ChainId']);
        }
        // ensure the json data is a string
        if (data['From'] && !(typeof data['From'] === 'string' || data['From'] instanceof String)) {
            throw new Error("Expected the field `From` to be a primitive type in the JSON string but got " + data['From']);
        }
        // ensure the json data is a string
        if (data['Gas'] && !(typeof data['Gas'] === 'string' || data['Gas'] instanceof String)) {
            throw new Error("Expected the field `Gas` to be a primitive type in the JSON string but got " + data['Gas']);
        }
        // ensure the json data is a string
        if (data['GasPrice'] && !(typeof data['GasPrice'] === 'string' || data['GasPrice'] instanceof String)) {
            throw new Error("Expected the field `GasPrice` to be a primitive type in the JSON string but got " + data['GasPrice']);
        }
        // ensure the json data is a string
        if (data['Hash'] && !(typeof data['Hash'] === 'string' || data['Hash'] instanceof String)) {
            throw new Error("Expected the field `Hash` to be a primitive type in the JSON string but got " + data['Hash']);
        }
        // ensure the json data is a string
        if (data['Input'] && !(typeof data['Input'] === 'string' || data['Input'] instanceof String)) {
            throw new Error("Expected the field `Input` to be a primitive type in the JSON string but got " + data['Input']);
        }
        // ensure the json data is a string
        if (data['MaxFeePerGas'] && !(typeof data['MaxFeePerGas'] === 'string' || data['MaxFeePerGas'] instanceof String)) {
            throw new Error("Expected the field `MaxFeePerGas` to be a primitive type in the JSON string but got " + data['MaxFeePerGas']);
        }
        // ensure the json data is a string
        if (data['MaxPriorityFeePerGas'] && !(typeof data['MaxPriorityFeePerGas'] === 'string' || data['MaxPriorityFeePerGas'] instanceof String)) {
            throw new Error("Expected the field `MaxPriorityFeePerGas` to be a primitive type in the JSON string but got " + data['MaxPriorityFeePerGas']);
        }
        // ensure the json data is a string
        if (data['Nonce'] && !(typeof data['Nonce'] === 'string' || data['Nonce'] instanceof String)) {
            throw new Error("Expected the field `Nonce` to be a primitive type in the JSON string but got " + data['Nonce']);
        }
        // ensure the json data is a string
        if (data['R'] && !(typeof data['R'] === 'string' || data['R'] instanceof String)) {
            throw new Error("Expected the field `R` to be a primitive type in the JSON string but got " + data['R']);
        }
        // ensure the json data is a string
        if (data['S'] && !(typeof data['S'] === 'string' || data['S'] instanceof String)) {
            throw new Error("Expected the field `S` to be a primitive type in the JSON string but got " + data['S']);
        }
        // ensure the json data is a string
        if (data['To'] && !(typeof data['To'] === 'string' || data['To'] instanceof String)) {
            throw new Error("Expected the field `To` to be a primitive type in the JSON string but got " + data['To']);
        }
        // ensure the json data is a string
        if (data['TransactionIndex'] && !(typeof data['TransactionIndex'] === 'string' || data['TransactionIndex'] instanceof String)) {
            throw new Error("Expected the field `TransactionIndex` to be a primitive type in the JSON string but got " + data['TransactionIndex']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['V'] && !(typeof data['V'] === 'string' || data['V'] instanceof String)) {
            throw new Error("Expected the field `V` to be a primitive type in the JSON string but got " + data['V']);
        }
        // ensure the json data is a string
        if (data['Value'] && !(typeof data['Value'] === 'string' || data['Value'] instanceof String)) {
            throw new Error("Expected the field `Value` to be a primitive type in the JSON string but got " + data['Value']);
        }

        return true;
    }


}



/**
 * A list of addresses and storage keys that the transaction plans to access
 * @member {String} AccessList
 */
ResponseTransaction.prototype['AccessList'] = undefined;

/**
 * The hash of the block where this transaction was in. Null when it's a pending transaction
 * @member {String} BlockHash
 */
ResponseTransaction.prototype['BlockHash'] = undefined;

/**
 * The block number where this transaction was in. Null when it's a pending transaction
 * @member {String} BlockNumber
 */
ResponseTransaction.prototype['BlockNumber'] = undefined;

/**
 * The chain id of the transaction, if any
 * @member {String} ChainId
 */
ResponseTransaction.prototype['ChainId'] = undefined;

/**
 * The address of the sender
 * @member {String} From
 */
ResponseTransaction.prototype['From'] = undefined;

/**
 * The gas provided by the sender, encoded as decimal
 * @member {String} Gas
 */
ResponseTransaction.prototype['Gas'] = undefined;

/**
 * The gas price provided by the sender in wei encoded as decimal
 * @member {String} GasPrice
 */
ResponseTransaction.prototype['GasPrice'] = undefined;

/**
 * The hash of the transaction
 * @member {String} Hash
 */
ResponseTransaction.prototype['Hash'] = undefined;

/**
 * The data sent along with the transaction
 * @member {String} Input
 */
ResponseTransaction.prototype['Input'] = undefined;

/**
 * The maximum fee per gas set in the transaction
 * @member {String} MaxFeePerGas
 */
ResponseTransaction.prototype['MaxFeePerGas'] = undefined;

/**
 * The maximum priority gas fee set in the transaction
 * @member {String} MaxPriorityFeePerGas
 */
ResponseTransaction.prototype['MaxPriorityFeePerGas'] = undefined;

/**
 * The number of transactions made by the sender prior to this one encoded as decimal
 * @member {String} Nonce
 */
ResponseTransaction.prototype['Nonce'] = undefined;

/**
 * The R field of the signature
 * @member {String} R
 */
ResponseTransaction.prototype['R'] = undefined;

/**
 * The S field of the signature
 * @member {String} S
 */
ResponseTransaction.prototype['S'] = undefined;

/**
 * The address of the receiver. Null when its a contract creation transaction
 * @member {String} To
 */
ResponseTransaction.prototype['To'] = undefined;

/**
 * The integer of the transaction's index position that the log was created from. Null when it's a pending log
 * @member {String} TransactionIndex
 */
ResponseTransaction.prototype['TransactionIndex'] = undefined;

/**
 * The transaction type
 * @member {String} Type
 */
ResponseTransaction.prototype['Type'] = undefined;

/**
 * The standardized V field of the signature
 * @member {String} V
 */
ResponseTransaction.prototype['V'] = undefined;

/**
 * The value transferred in wei encoded as decimal
 * @member {String} Value
 */
ResponseTransaction.prototype['Value'] = undefined;






export default ResponseTransaction;

