/**
 * QAN AutoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OutputFeeHistory model module.
 * @module model/OutputFeeHistory
 * @version 0.0.1
 */
class OutputFeeHistory {
    /**
     * Constructs a new <code>OutputFeeHistory</code>.
     * @alias module:model/OutputFeeHistory
     * @param baseFeePerGas {Array.<String>} An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks
     * @param gasUsedRatio {Array.<Number>} An array of block gas used ratios. These are calculated as the ratio of gasUsed and gasLimit
     * @param oldestBlock {String} The lowest number block of the returned range encoded in decimal format
     * @param reward {Array.<Array.<String>>} An array of effective priority fees per gas data points from a single block. All zeroes are returned if the block is empty
     */
    constructor(baseFeePerGas, gasUsedRatio, oldestBlock, reward) { 
        
        OutputFeeHistory.initialize(this, baseFeePerGas, gasUsedRatio, oldestBlock, reward);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, baseFeePerGas, gasUsedRatio, oldestBlock, reward) { 
        obj['BaseFeePerGas'] = baseFeePerGas;
        obj['GasUsedRatio'] = gasUsedRatio;
        obj['OldestBlock'] = oldestBlock;
        obj['Reward'] = reward;
    }

    /**
     * Constructs a <code>OutputFeeHistory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OutputFeeHistory} obj Optional instance to populate.
     * @return {module:model/OutputFeeHistory} The populated <code>OutputFeeHistory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OutputFeeHistory();

            if (data.hasOwnProperty('$schema')) {
                obj['$schema'] = ApiClient.convertToType(data['$schema'], 'String');
            }
            if (data.hasOwnProperty('BaseFeePerGas')) {
                obj['BaseFeePerGas'] = ApiClient.convertToType(data['BaseFeePerGas'], ['String']);
            }
            if (data.hasOwnProperty('GasUsedRatio')) {
                obj['GasUsedRatio'] = ApiClient.convertToType(data['GasUsedRatio'], ['Number']);
            }
            if (data.hasOwnProperty('OldestBlock')) {
                obj['OldestBlock'] = ApiClient.convertToType(data['OldestBlock'], 'String');
            }
            if (data.hasOwnProperty('Reward')) {
                obj['Reward'] = ApiClient.convertToType(data['Reward'], [['String']]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OutputFeeHistory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OutputFeeHistory</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OutputFeeHistory.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['$schema'] && !(typeof data['$schema'] === 'string' || data['$schema'] instanceof String)) {
            throw new Error("Expected the field `$schema` to be a primitive type in the JSON string but got " + data['$schema']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['BaseFeePerGas'])) {
            throw new Error("Expected the field `BaseFeePerGas` to be an array in the JSON data but got " + data['BaseFeePerGas']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['GasUsedRatio'])) {
            throw new Error("Expected the field `GasUsedRatio` to be an array in the JSON data but got " + data['GasUsedRatio']);
        }
        // ensure the json data is a string
        if (data['OldestBlock'] && !(typeof data['OldestBlock'] === 'string' || data['OldestBlock'] instanceof String)) {
            throw new Error("Expected the field `OldestBlock` to be a primitive type in the JSON string but got " + data['OldestBlock']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Reward'])) {
            throw new Error("Expected the field `Reward` to be an array in the JSON data but got " + data['Reward']);
        }

        return true;
    }


}

OutputFeeHistory.RequiredProperties = ["BaseFeePerGas", "GasUsedRatio", "OldestBlock", "Reward"];

/**
 * A URL to the JSON Schema for this object.
 * @member {String} $schema
 */
OutputFeeHistory.prototype['$schema'] = undefined;

/**
 * An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks
 * @member {Array.<String>} BaseFeePerGas
 */
OutputFeeHistory.prototype['BaseFeePerGas'] = undefined;

/**
 * An array of block gas used ratios. These are calculated as the ratio of gasUsed and gasLimit
 * @member {Array.<Number>} GasUsedRatio
 */
OutputFeeHistory.prototype['GasUsedRatio'] = undefined;

/**
 * The lowest number block of the returned range encoded in decimal format
 * @member {String} OldestBlock
 */
OutputFeeHistory.prototype['OldestBlock'] = undefined;

/**
 * An array of effective priority fees per gas data points from a single block. All zeroes are returned if the block is empty
 * @member {Array.<Array.<String>>} Reward
 */
OutputFeeHistory.prototype['Reward'] = undefined;






export default OutputFeeHistory;

