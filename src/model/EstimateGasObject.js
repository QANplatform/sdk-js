/**
 * QAN AutoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EstimateGasObject model module.
 * @module model/EstimateGasObject
 * @version 0.0.1
 */
class EstimateGasObject {
    /**
     * Constructs a new <code>EstimateGasObject</code>.
     * @alias module:model/EstimateGasObject
     */
    constructor() { 
        
        EstimateGasObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EstimateGasObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EstimateGasObject} obj Optional instance to populate.
     * @return {module:model/EstimateGasObject} The populated <code>EstimateGasObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EstimateGasObject();

            if (data.hasOwnProperty('Balance')) {
                obj['Balance'] = ApiClient.convertToType(data['Balance'], 'String');
            }
            if (data.hasOwnProperty('Code')) {
                obj['Code'] = ApiClient.convertToType(data['Code'], 'Number');
            }
            if (data.hasOwnProperty('Nonce')) {
                obj['Nonce'] = ApiClient.convertToType(data['Nonce'], 'String');
            }
            if (data.hasOwnProperty('State')) {
                obj['State'] = ApiClient.convertToType(data['State'], 'String');
            }
            if (data.hasOwnProperty('StateDiff')) {
                obj['StateDiff'] = ApiClient.convertToType(data['StateDiff'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EstimateGasObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EstimateGasObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Balance'] && !(typeof data['Balance'] === 'string' || data['Balance'] instanceof String)) {
            throw new Error("Expected the field `Balance` to be a primitive type in the JSON string but got " + data['Balance']);
        }
        // ensure the json data is a string
        if (data['Nonce'] && !(typeof data['Nonce'] === 'string' || data['Nonce'] instanceof String)) {
            throw new Error("Expected the field `Nonce` to be a primitive type in the JSON string but got " + data['Nonce']);
        }
        // ensure the json data is a string
        if (data['State'] && !(typeof data['State'] === 'string' || data['State'] instanceof String)) {
            throw new Error("Expected the field `State` to be a primitive type in the JSON string but got " + data['State']);
        }
        // ensure the json data is a string
        if (data['StateDiff'] && !(typeof data['StateDiff'] === 'string' || data['StateDiff'] instanceof String)) {
            throw new Error("Expected the field `StateDiff` to be a primitive type in the JSON string but got " + data['StateDiff']);
        }

        return true;
    }


}



/**
 * Fake balance to set for the account before executing the call
 * @member {String} Balance
 */
EstimateGasObject.prototype['Balance'] = undefined;

/**
 * Fake EVM bytecode to inject into the account before executing the call
 * @member {Number} Code
 */
EstimateGasObject.prototype['Code'] = undefined;

/**
 * Fake nonce to set for the account before executing the call
 * @member {String} Nonce
 */
EstimateGasObject.prototype['Nonce'] = undefined;

/**
 * Fake key-value mapping to override all slots in the account storage before executing the call
 * @member {String} State
 */
EstimateGasObject.prototype['State'] = undefined;

/**
 * Fake key-value mapping to override individual slots in the account storage before executing the call
 * @member {String} StateDiff
 */
EstimateGasObject.prototype['StateDiff'] = undefined;






export default EstimateGasObject;

