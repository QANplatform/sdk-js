/**
 * QAN AutoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResponseTransaction from './ResponseTransaction';
import ResponseWithdrawals from './ResponseWithdrawals';

/**
 * The ResponseBlock model module.
 * @module model/ResponseBlock
 * @version 0.0.1
 */
class ResponseBlock {
    /**
     * Constructs a new <code>ResponseBlock</code>.
     * @alias module:model/ResponseBlock
     * @param baseFeePerGas {String} A string of the base fee encoded in decimal format. Please note that this response field will not be included in a block requested before the EIP-1559 upgrade
     * @param difficulty {String} The integer of the difficulty for this block encoded as a decimal
     * @param extraData {String} The “extra data” field of this block
     * @param gasLimit {String} The maximum gas allowed in this block encoded as a decimal
     * @param gasUsed {String} The total used gas by all transactions in this block encoded as a decimal
     * @param hash {String} The block hash of the requested block. null if pending
     * @param logsBloom {String} The bloom filter for the logs of the block. null if pending
     * @param miner {String} The address of the beneficiary to whom the mining rewards were given
     * @param mixHash {String} A string of a 256-bit hash encoded as a decimal
     * @param nonce {String} The hash of the generated proof-of-work. null if pending
     * @param number {String} The block number of the requested block encoded as a decimal. null if pending
     * @param parentHash {String} The hash of the parent block
     * @param receiptsRoot {String} The root of the receipts trie of the bloc
     * @param sha3Uncles {String} The SHA3 of the uncles data in the block
     * @param size {String} The size of this block in bytes as an Integer value encoded as decimal
     * @param stateRoot {String} The root of the final state trie of the block
     * @param timestamp {String} The unix timestamp for when the block was collated
     * @param totalDifficulty {String} The integer of the total difficulty of the chain until this block encoded as a decimal
     * @param transactions {Array.<module:model/ResponseTransaction>} An array of transaction objects - please see eth_getTransactionByHash for exact shape
     * @param transactionsRoot {String} The root of the transaction trie of the block
     * @param uncles {Array.<String>} An array of uncle hashes
     * @param withdrawals {module:model/ResponseWithdrawals} A withdrawals object contains information about withdrawals made by validators. Please note that this field will not be included in a block requested before the EIP-4895 upgrade
     * @param withdrawalsRoot {String} The Merkle root of withdrawal data. Also, please note that this field will not be included in a block requested before the EIP-4895 upgrade
     */
    constructor(baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash, logsBloom, miner, mixHash, nonce, number, parentHash, receiptsRoot, sha3Uncles, size, stateRoot, timestamp, totalDifficulty, transactions, transactionsRoot, uncles, withdrawals, withdrawalsRoot) { 
        
        ResponseBlock.initialize(this, baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash, logsBloom, miner, mixHash, nonce, number, parentHash, receiptsRoot, sha3Uncles, size, stateRoot, timestamp, totalDifficulty, transactions, transactionsRoot, uncles, withdrawals, withdrawalsRoot);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash, logsBloom, miner, mixHash, nonce, number, parentHash, receiptsRoot, sha3Uncles, size, stateRoot, timestamp, totalDifficulty, transactions, transactionsRoot, uncles, withdrawals, withdrawalsRoot) { 
        obj['BaseFeePerGas'] = baseFeePerGas;
        obj['Difficulty'] = difficulty;
        obj['ExtraData'] = extraData;
        obj['GasLimit'] = gasLimit;
        obj['GasUsed'] = gasUsed;
        obj['Hash'] = hash;
        obj['LogsBloom'] = logsBloom;
        obj['Miner'] = miner;
        obj['MixHash'] = mixHash;
        obj['Nonce'] = nonce;
        obj['Number'] = number;
        obj['ParentHash'] = parentHash;
        obj['ReceiptsRoot'] = receiptsRoot;
        obj['Sha3Uncles'] = sha3Uncles;
        obj['Size'] = size;
        obj['StateRoot'] = stateRoot;
        obj['Timestamp'] = timestamp;
        obj['TotalDifficulty'] = totalDifficulty;
        obj['Transactions'] = transactions;
        obj['TransactionsRoot'] = transactionsRoot;
        obj['Uncles'] = uncles;
        obj['Withdrawals'] = withdrawals;
        obj['WithdrawalsRoot'] = withdrawalsRoot;
    }

    /**
     * Constructs a <code>ResponseBlock</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResponseBlock} obj Optional instance to populate.
     * @return {module:model/ResponseBlock} The populated <code>ResponseBlock</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResponseBlock();

            if (data.hasOwnProperty('BaseFeePerGas')) {
                obj['BaseFeePerGas'] = ApiClient.convertToType(data['BaseFeePerGas'], 'String');
            }
            if (data.hasOwnProperty('Difficulty')) {
                obj['Difficulty'] = ApiClient.convertToType(data['Difficulty'], 'String');
            }
            if (data.hasOwnProperty('ExtraData')) {
                obj['ExtraData'] = ApiClient.convertToType(data['ExtraData'], 'String');
            }
            if (data.hasOwnProperty('GasLimit')) {
                obj['GasLimit'] = ApiClient.convertToType(data['GasLimit'], 'String');
            }
            if (data.hasOwnProperty('GasUsed')) {
                obj['GasUsed'] = ApiClient.convertToType(data['GasUsed'], 'String');
            }
            if (data.hasOwnProperty('Hash')) {
                obj['Hash'] = ApiClient.convertToType(data['Hash'], 'String');
            }
            if (data.hasOwnProperty('LogsBloom')) {
                obj['LogsBloom'] = ApiClient.convertToType(data['LogsBloom'], 'String');
            }
            if (data.hasOwnProperty('Miner')) {
                obj['Miner'] = ApiClient.convertToType(data['Miner'], 'String');
            }
            if (data.hasOwnProperty('MixHash')) {
                obj['MixHash'] = ApiClient.convertToType(data['MixHash'], 'String');
            }
            if (data.hasOwnProperty('Nonce')) {
                obj['Nonce'] = ApiClient.convertToType(data['Nonce'], 'String');
            }
            if (data.hasOwnProperty('Number')) {
                obj['Number'] = ApiClient.convertToType(data['Number'], 'String');
            }
            if (data.hasOwnProperty('ParentHash')) {
                obj['ParentHash'] = ApiClient.convertToType(data['ParentHash'], 'String');
            }
            if (data.hasOwnProperty('ReceiptsRoot')) {
                obj['ReceiptsRoot'] = ApiClient.convertToType(data['ReceiptsRoot'], 'String');
            }
            if (data.hasOwnProperty('Sha3Uncles')) {
                obj['Sha3Uncles'] = ApiClient.convertToType(data['Sha3Uncles'], 'String');
            }
            if (data.hasOwnProperty('Size')) {
                obj['Size'] = ApiClient.convertToType(data['Size'], 'String');
            }
            if (data.hasOwnProperty('StateRoot')) {
                obj['StateRoot'] = ApiClient.convertToType(data['StateRoot'], 'String');
            }
            if (data.hasOwnProperty('Timestamp')) {
                obj['Timestamp'] = ApiClient.convertToType(data['Timestamp'], 'String');
            }
            if (data.hasOwnProperty('TotalDifficulty')) {
                obj['TotalDifficulty'] = ApiClient.convertToType(data['TotalDifficulty'], 'String');
            }
            if (data.hasOwnProperty('Transactions')) {
                obj['Transactions'] = ApiClient.convertToType(data['Transactions'], [ResponseTransaction]);
            }
            if (data.hasOwnProperty('TransactionsRoot')) {
                obj['TransactionsRoot'] = ApiClient.convertToType(data['TransactionsRoot'], 'String');
            }
            if (data.hasOwnProperty('Uncles')) {
                obj['Uncles'] = ApiClient.convertToType(data['Uncles'], ['String']);
            }
            if (data.hasOwnProperty('Withdrawals')) {
                obj['Withdrawals'] = ResponseWithdrawals.constructFromObject(data['Withdrawals']);
            }
            if (data.hasOwnProperty('WithdrawalsRoot')) {
                obj['WithdrawalsRoot'] = ApiClient.convertToType(data['WithdrawalsRoot'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResponseBlock</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResponseBlock</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResponseBlock.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['BaseFeePerGas'] && !(typeof data['BaseFeePerGas'] === 'string' || data['BaseFeePerGas'] instanceof String)) {
            throw new Error("Expected the field `BaseFeePerGas` to be a primitive type in the JSON string but got " + data['BaseFeePerGas']);
        }
        // ensure the json data is a string
        if (data['Difficulty'] && !(typeof data['Difficulty'] === 'string' || data['Difficulty'] instanceof String)) {
            throw new Error("Expected the field `Difficulty` to be a primitive type in the JSON string but got " + data['Difficulty']);
        }
        // ensure the json data is a string
        if (data['ExtraData'] && !(typeof data['ExtraData'] === 'string' || data['ExtraData'] instanceof String)) {
            throw new Error("Expected the field `ExtraData` to be a primitive type in the JSON string but got " + data['ExtraData']);
        }
        // ensure the json data is a string
        if (data['GasLimit'] && !(typeof data['GasLimit'] === 'string' || data['GasLimit'] instanceof String)) {
            throw new Error("Expected the field `GasLimit` to be a primitive type in the JSON string but got " + data['GasLimit']);
        }
        // ensure the json data is a string
        if (data['GasUsed'] && !(typeof data['GasUsed'] === 'string' || data['GasUsed'] instanceof String)) {
            throw new Error("Expected the field `GasUsed` to be a primitive type in the JSON string but got " + data['GasUsed']);
        }
        // ensure the json data is a string
        if (data['Hash'] && !(typeof data['Hash'] === 'string' || data['Hash'] instanceof String)) {
            throw new Error("Expected the field `Hash` to be a primitive type in the JSON string but got " + data['Hash']);
        }
        // ensure the json data is a string
        if (data['LogsBloom'] && !(typeof data['LogsBloom'] === 'string' || data['LogsBloom'] instanceof String)) {
            throw new Error("Expected the field `LogsBloom` to be a primitive type in the JSON string but got " + data['LogsBloom']);
        }
        // ensure the json data is a string
        if (data['Miner'] && !(typeof data['Miner'] === 'string' || data['Miner'] instanceof String)) {
            throw new Error("Expected the field `Miner` to be a primitive type in the JSON string but got " + data['Miner']);
        }
        // ensure the json data is a string
        if (data['MixHash'] && !(typeof data['MixHash'] === 'string' || data['MixHash'] instanceof String)) {
            throw new Error("Expected the field `MixHash` to be a primitive type in the JSON string but got " + data['MixHash']);
        }
        // ensure the json data is a string
        if (data['Nonce'] && !(typeof data['Nonce'] === 'string' || data['Nonce'] instanceof String)) {
            throw new Error("Expected the field `Nonce` to be a primitive type in the JSON string but got " + data['Nonce']);
        }
        // ensure the json data is a string
        if (data['Number'] && !(typeof data['Number'] === 'string' || data['Number'] instanceof String)) {
            throw new Error("Expected the field `Number` to be a primitive type in the JSON string but got " + data['Number']);
        }
        // ensure the json data is a string
        if (data['ParentHash'] && !(typeof data['ParentHash'] === 'string' || data['ParentHash'] instanceof String)) {
            throw new Error("Expected the field `ParentHash` to be a primitive type in the JSON string but got " + data['ParentHash']);
        }
        // ensure the json data is a string
        if (data['ReceiptsRoot'] && !(typeof data['ReceiptsRoot'] === 'string' || data['ReceiptsRoot'] instanceof String)) {
            throw new Error("Expected the field `ReceiptsRoot` to be a primitive type in the JSON string but got " + data['ReceiptsRoot']);
        }
        // ensure the json data is a string
        if (data['Sha3Uncles'] && !(typeof data['Sha3Uncles'] === 'string' || data['Sha3Uncles'] instanceof String)) {
            throw new Error("Expected the field `Sha3Uncles` to be a primitive type in the JSON string but got " + data['Sha3Uncles']);
        }
        // ensure the json data is a string
        if (data['Size'] && !(typeof data['Size'] === 'string' || data['Size'] instanceof String)) {
            throw new Error("Expected the field `Size` to be a primitive type in the JSON string but got " + data['Size']);
        }
        // ensure the json data is a string
        if (data['StateRoot'] && !(typeof data['StateRoot'] === 'string' || data['StateRoot'] instanceof String)) {
            throw new Error("Expected the field `StateRoot` to be a primitive type in the JSON string but got " + data['StateRoot']);
        }
        // ensure the json data is a string
        if (data['Timestamp'] && !(typeof data['Timestamp'] === 'string' || data['Timestamp'] instanceof String)) {
            throw new Error("Expected the field `Timestamp` to be a primitive type in the JSON string but got " + data['Timestamp']);
        }
        // ensure the json data is a string
        if (data['TotalDifficulty'] && !(typeof data['TotalDifficulty'] === 'string' || data['TotalDifficulty'] instanceof String)) {
            throw new Error("Expected the field `TotalDifficulty` to be a primitive type in the JSON string but got " + data['TotalDifficulty']);
        }
        if (data['Transactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Transactions'])) {
                throw new Error("Expected the field `Transactions` to be an array in the JSON data but got " + data['Transactions']);
            }
            // validate the optional field `Transactions` (array)
            for (const item of data['Transactions']) {
                ResponseTransaction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['TransactionsRoot'] && !(typeof data['TransactionsRoot'] === 'string' || data['TransactionsRoot'] instanceof String)) {
            throw new Error("Expected the field `TransactionsRoot` to be a primitive type in the JSON string but got " + data['TransactionsRoot']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Uncles'])) {
            throw new Error("Expected the field `Uncles` to be an array in the JSON data but got " + data['Uncles']);
        }
        // validate the optional field `Withdrawals`
        if (data['Withdrawals']) { // data not null
          ResponseWithdrawals.validateJSON(data['Withdrawals']);
        }
        // ensure the json data is a string
        if (data['WithdrawalsRoot'] && !(typeof data['WithdrawalsRoot'] === 'string' || data['WithdrawalsRoot'] instanceof String)) {
            throw new Error("Expected the field `WithdrawalsRoot` to be a primitive type in the JSON string but got " + data['WithdrawalsRoot']);
        }

        return true;
    }


}

ResponseBlock.RequiredProperties = ["BaseFeePerGas", "Difficulty", "ExtraData", "GasLimit", "GasUsed", "Hash", "LogsBloom", "Miner", "MixHash", "Nonce", "Number", "ParentHash", "ReceiptsRoot", "Sha3Uncles", "Size", "StateRoot", "Timestamp", "TotalDifficulty", "Transactions", "TransactionsRoot", "Uncles", "Withdrawals", "WithdrawalsRoot"];

/**
 * A string of the base fee encoded in decimal format. Please note that this response field will not be included in a block requested before the EIP-1559 upgrade
 * @member {String} BaseFeePerGas
 */
ResponseBlock.prototype['BaseFeePerGas'] = undefined;

/**
 * The integer of the difficulty for this block encoded as a decimal
 * @member {String} Difficulty
 */
ResponseBlock.prototype['Difficulty'] = undefined;

/**
 * The “extra data” field of this block
 * @member {String} ExtraData
 */
ResponseBlock.prototype['ExtraData'] = undefined;

/**
 * The maximum gas allowed in this block encoded as a decimal
 * @member {String} GasLimit
 */
ResponseBlock.prototype['GasLimit'] = undefined;

/**
 * The total used gas by all transactions in this block encoded as a decimal
 * @member {String} GasUsed
 */
ResponseBlock.prototype['GasUsed'] = undefined;

/**
 * The block hash of the requested block. null if pending
 * @member {String} Hash
 */
ResponseBlock.prototype['Hash'] = undefined;

/**
 * The bloom filter for the logs of the block. null if pending
 * @member {String} LogsBloom
 */
ResponseBlock.prototype['LogsBloom'] = undefined;

/**
 * The address of the beneficiary to whom the mining rewards were given
 * @member {String} Miner
 */
ResponseBlock.prototype['Miner'] = undefined;

/**
 * A string of a 256-bit hash encoded as a decimal
 * @member {String} MixHash
 */
ResponseBlock.prototype['MixHash'] = undefined;

/**
 * The hash of the generated proof-of-work. null if pending
 * @member {String} Nonce
 */
ResponseBlock.prototype['Nonce'] = undefined;

/**
 * The block number of the requested block encoded as a decimal. null if pending
 * @member {String} Number
 */
ResponseBlock.prototype['Number'] = undefined;

/**
 * The hash of the parent block
 * @member {String} ParentHash
 */
ResponseBlock.prototype['ParentHash'] = undefined;

/**
 * The root of the receipts trie of the bloc
 * @member {String} ReceiptsRoot
 */
ResponseBlock.prototype['ReceiptsRoot'] = undefined;

/**
 * The SHA3 of the uncles data in the block
 * @member {String} Sha3Uncles
 */
ResponseBlock.prototype['Sha3Uncles'] = undefined;

/**
 * The size of this block in bytes as an Integer value encoded as decimal
 * @member {String} Size
 */
ResponseBlock.prototype['Size'] = undefined;

/**
 * The root of the final state trie of the block
 * @member {String} StateRoot
 */
ResponseBlock.prototype['StateRoot'] = undefined;

/**
 * The unix timestamp for when the block was collated
 * @member {String} Timestamp
 */
ResponseBlock.prototype['Timestamp'] = undefined;

/**
 * The integer of the total difficulty of the chain until this block encoded as a decimal
 * @member {String} TotalDifficulty
 */
ResponseBlock.prototype['TotalDifficulty'] = undefined;

/**
 * An array of transaction objects - please see eth_getTransactionByHash for exact shape
 * @member {Array.<module:model/ResponseTransaction>} Transactions
 */
ResponseBlock.prototype['Transactions'] = undefined;

/**
 * The root of the transaction trie of the block
 * @member {String} TransactionsRoot
 */
ResponseBlock.prototype['TransactionsRoot'] = undefined;

/**
 * An array of uncle hashes
 * @member {Array.<String>} Uncles
 */
ResponseBlock.prototype['Uncles'] = undefined;

/**
 * A withdrawals object contains information about withdrawals made by validators. Please note that this field will not be included in a block requested before the EIP-4895 upgrade
 * @member {module:model/ResponseWithdrawals} Withdrawals
 */
ResponseBlock.prototype['Withdrawals'] = undefined;

/**
 * The Merkle root of withdrawal data. Also, please note that this field will not be included in a block requested before the EIP-4895 upgrade
 * @member {String} WithdrawalsRoot
 */
ResponseBlock.prototype['WithdrawalsRoot'] = undefined;






export default ResponseBlock;

