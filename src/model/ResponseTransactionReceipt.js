/**
 * QAN AutoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResponseLog from './ResponseLog';

/**
 * The ResponseTransactionReceipt model module.
 * @module model/ResponseTransactionReceipt
 * @version 0.0.1
 */
class ResponseTransactionReceipt {
    /**
     * Constructs a new <code>ResponseTransactionReceipt</code>.
     * @alias module:model/ResponseTransactionReceipt
     */
    constructor() { 
        
        ResponseTransactionReceipt.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResponseTransactionReceipt</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResponseTransactionReceipt} obj Optional instance to populate.
     * @return {module:model/ResponseTransactionReceipt} The populated <code>ResponseTransactionReceipt</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResponseTransactionReceipt();

            if (data.hasOwnProperty('BlockHash')) {
                obj['BlockHash'] = ApiClient.convertToType(data['BlockHash'], 'String');
            }
            if (data.hasOwnProperty('BlockNumber')) {
                obj['BlockNumber'] = ApiClient.convertToType(data['BlockNumber'], 'String');
            }
            if (data.hasOwnProperty('ContractAddress')) {
                obj['ContractAddress'] = ApiClient.convertToType(data['ContractAddress'], 'String');
            }
            if (data.hasOwnProperty('CumulativeGasUsed')) {
                obj['CumulativeGasUsed'] = ApiClient.convertToType(data['CumulativeGasUsed'], 'String');
            }
            if (data.hasOwnProperty('EffectiveGasPrice')) {
                obj['EffectiveGasPrice'] = ApiClient.convertToType(data['EffectiveGasPrice'], 'String');
            }
            if (data.hasOwnProperty('From')) {
                obj['From'] = ApiClient.convertToType(data['From'], 'String');
            }
            if (data.hasOwnProperty('GasUsed')) {
                obj['GasUsed'] = ApiClient.convertToType(data['GasUsed'], 'String');
            }
            if (data.hasOwnProperty('Logs')) {
                obj['Logs'] = ApiClient.convertToType(data['Logs'], [ResponseLog]);
            }
            if (data.hasOwnProperty('LogsBloom')) {
                obj['LogsBloom'] = ApiClient.convertToType(data['LogsBloom'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('To')) {
                obj['To'] = ApiClient.convertToType(data['To'], 'String');
            }
            if (data.hasOwnProperty('TransactionHash')) {
                obj['TransactionHash'] = ApiClient.convertToType(data['TransactionHash'], 'String');
            }
            if (data.hasOwnProperty('TransactionIndex')) {
                obj['TransactionIndex'] = ApiClient.convertToType(data['TransactionIndex'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResponseTransactionReceipt</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResponseTransactionReceipt</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BlockHash'] && !(typeof data['BlockHash'] === 'string' || data['BlockHash'] instanceof String)) {
            throw new Error("Expected the field `BlockHash` to be a primitive type in the JSON string but got " + data['BlockHash']);
        }
        // ensure the json data is a string
        if (data['BlockNumber'] && !(typeof data['BlockNumber'] === 'string' || data['BlockNumber'] instanceof String)) {
            throw new Error("Expected the field `BlockNumber` to be a primitive type in the JSON string but got " + data['BlockNumber']);
        }
        // ensure the json data is a string
        if (data['ContractAddress'] && !(typeof data['ContractAddress'] === 'string' || data['ContractAddress'] instanceof String)) {
            throw new Error("Expected the field `ContractAddress` to be a primitive type in the JSON string but got " + data['ContractAddress']);
        }
        // ensure the json data is a string
        if (data['CumulativeGasUsed'] && !(typeof data['CumulativeGasUsed'] === 'string' || data['CumulativeGasUsed'] instanceof String)) {
            throw new Error("Expected the field `CumulativeGasUsed` to be a primitive type in the JSON string but got " + data['CumulativeGasUsed']);
        }
        // ensure the json data is a string
        if (data['EffectiveGasPrice'] && !(typeof data['EffectiveGasPrice'] === 'string' || data['EffectiveGasPrice'] instanceof String)) {
            throw new Error("Expected the field `EffectiveGasPrice` to be a primitive type in the JSON string but got " + data['EffectiveGasPrice']);
        }
        // ensure the json data is a string
        if (data['From'] && !(typeof data['From'] === 'string' || data['From'] instanceof String)) {
            throw new Error("Expected the field `From` to be a primitive type in the JSON string but got " + data['From']);
        }
        // ensure the json data is a string
        if (data['GasUsed'] && !(typeof data['GasUsed'] === 'string' || data['GasUsed'] instanceof String)) {
            throw new Error("Expected the field `GasUsed` to be a primitive type in the JSON string but got " + data['GasUsed']);
        }
        if (data['Logs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Logs'])) {
                throw new Error("Expected the field `Logs` to be an array in the JSON data but got " + data['Logs']);
            }
            // validate the optional field `Logs` (array)
            for (const item of data['Logs']) {
                ResponseLog.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['LogsBloom'] && !(typeof data['LogsBloom'] === 'string' || data['LogsBloom'] instanceof String)) {
            throw new Error("Expected the field `LogsBloom` to be a primitive type in the JSON string but got " + data['LogsBloom']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['To'] && !(typeof data['To'] === 'string' || data['To'] instanceof String)) {
            throw new Error("Expected the field `To` to be a primitive type in the JSON string but got " + data['To']);
        }
        // ensure the json data is a string
        if (data['TransactionHash'] && !(typeof data['TransactionHash'] === 'string' || data['TransactionHash'] instanceof String)) {
            throw new Error("Expected the field `TransactionHash` to be a primitive type in the JSON string but got " + data['TransactionHash']);
        }
        // ensure the json data is a string
        if (data['TransactionIndex'] && !(typeof data['TransactionIndex'] === 'string' || data['TransactionIndex'] instanceof String)) {
            throw new Error("Expected the field `TransactionIndex` to be a primitive type in the JSON string but got " + data['TransactionIndex']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}



/**
 * The hash of the block. null when pending
 * @member {String} BlockHash
 */
ResponseTransactionReceipt.prototype['BlockHash'] = undefined;

/**
 * @member {String} BlockNumber
 */
ResponseTransactionReceipt.prototype['BlockNumber'] = undefined;

/**
 * The contract address created if the transaction was a contract creation, otherwise null
 * @member {String} ContractAddress
 */
ResponseTransactionReceipt.prototype['ContractAddress'] = undefined;

/**
 * The total amount of gas used when this transaction was executed in the block
 * @member {String} CumulativeGasUsed
 */
ResponseTransactionReceipt.prototype['CumulativeGasUsed'] = undefined;

/**
 * The actual value per gas deducted from the sender account
 * @member {String} EffectiveGasPrice
 */
ResponseTransactionReceipt.prototype['EffectiveGasPrice'] = undefined;

/**
 * The address of the sender
 * @member {String} From
 */
ResponseTransactionReceipt.prototype['From'] = undefined;

/**
 * The amount of gas used by this specific transaction alone
 * @member {String} GasUsed
 */
ResponseTransactionReceipt.prototype['GasUsed'] = undefined;

/**
 * An array of log objects that generated this transaction
 * @member {Array.<module:model/ResponseLog>} Logs
 */
ResponseTransactionReceipt.prototype['Logs'] = undefined;

/**
 * The bloom filter for light clients to quickly retrieve related logs
 * @member {String} LogsBloom
 */
ResponseTransactionReceipt.prototype['LogsBloom'] = undefined;

/**
 * It is either 1 (success) or 0 (failure) encoded as a decimal
 * @member {String} Status
 */
ResponseTransactionReceipt.prototype['Status'] = undefined;

/**
 * The address of the receiver. null when it's a contract creation transaction
 * @member {String} To
 */
ResponseTransactionReceipt.prototype['To'] = undefined;

/**
 * The hash of the transaction
 * @member {String} TransactionHash
 */
ResponseTransactionReceipt.prototype['TransactionHash'] = undefined;

/**
 * An index of the transaction in the block
 * @member {String} TransactionIndex
 */
ResponseTransactionReceipt.prototype['TransactionIndex'] = undefined;

/**
 * The value type
 * @member {String} Type
 */
ResponseTransactionReceipt.prototype['Type'] = undefined;






export default ResponseTransactionReceipt;

