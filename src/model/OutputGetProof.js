/**
 * QAN AutoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResponseStorageEntry from './ResponseStorageEntry';

/**
 * The OutputGetProof model module.
 * @module model/OutputGetProof
 * @version 0.0.1
 */
class OutputGetProof {
    /**
     * Constructs a new <code>OutputGetProof</code>.
     * @alias module:model/OutputGetProof
     * @param accountProof {String} An array of rlp-serialized MerkleTree-Nodes which starts with the stateRoot-Node and follows the path of the SHA3 address as key
     * @param address {String} The address associated with the account
     * @param balance {String} The current balance of the account in wei
     * @param codeHash {String} A 32 byte hash of the code of the account
     * @param nonce {String} The hash of the generated proof-of-work. Null if pending
     * @param storageHash {String} A 32 byte SHA3 of the storageRoot. All storage will deliver a MerkleProof starting with this rootHash
     * @param storageProof {Array.<module:model/ResponseStorageEntry>} An array of storage-entries as requested. Each entry is an object with the following fields:
     */
    constructor(accountProof, address, balance, codeHash, nonce, storageHash, storageProof) { 
        
        OutputGetProof.initialize(this, accountProof, address, balance, codeHash, nonce, storageHash, storageProof);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountProof, address, balance, codeHash, nonce, storageHash, storageProof) { 
        obj['AccountProof'] = accountProof;
        obj['Address'] = address;
        obj['Balance'] = balance;
        obj['CodeHash'] = codeHash;
        obj['Nonce'] = nonce;
        obj['StorageHash'] = storageHash;
        obj['StorageProof'] = storageProof;
    }

    /**
     * Constructs a <code>OutputGetProof</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OutputGetProof} obj Optional instance to populate.
     * @return {module:model/OutputGetProof} The populated <code>OutputGetProof</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OutputGetProof();

            if (data.hasOwnProperty('$schema')) {
                obj['$schema'] = ApiClient.convertToType(data['$schema'], 'String');
            }
            if (data.hasOwnProperty('AccountProof')) {
                obj['AccountProof'] = ApiClient.convertToType(data['AccountProof'], 'String');
            }
            if (data.hasOwnProperty('Address')) {
                obj['Address'] = ApiClient.convertToType(data['Address'], 'String');
            }
            if (data.hasOwnProperty('Balance')) {
                obj['Balance'] = ApiClient.convertToType(data['Balance'], 'String');
            }
            if (data.hasOwnProperty('CodeHash')) {
                obj['CodeHash'] = ApiClient.convertToType(data['CodeHash'], 'String');
            }
            if (data.hasOwnProperty('Nonce')) {
                obj['Nonce'] = ApiClient.convertToType(data['Nonce'], 'String');
            }
            if (data.hasOwnProperty('StorageHash')) {
                obj['StorageHash'] = ApiClient.convertToType(data['StorageHash'], 'String');
            }
            if (data.hasOwnProperty('StorageProof')) {
                obj['StorageProof'] = ApiClient.convertToType(data['StorageProof'], [ResponseStorageEntry]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OutputGetProof</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OutputGetProof</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OutputGetProof.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['$schema'] && !(typeof data['$schema'] === 'string' || data['$schema'] instanceof String)) {
            throw new Error("Expected the field `$schema` to be a primitive type in the JSON string but got " + data['$schema']);
        }
        // ensure the json data is a string
        if (data['AccountProof'] && !(typeof data['AccountProof'] === 'string' || data['AccountProof'] instanceof String)) {
            throw new Error("Expected the field `AccountProof` to be a primitive type in the JSON string but got " + data['AccountProof']);
        }
        // ensure the json data is a string
        if (data['Address'] && !(typeof data['Address'] === 'string' || data['Address'] instanceof String)) {
            throw new Error("Expected the field `Address` to be a primitive type in the JSON string but got " + data['Address']);
        }
        // ensure the json data is a string
        if (data['Balance'] && !(typeof data['Balance'] === 'string' || data['Balance'] instanceof String)) {
            throw new Error("Expected the field `Balance` to be a primitive type in the JSON string but got " + data['Balance']);
        }
        // ensure the json data is a string
        if (data['CodeHash'] && !(typeof data['CodeHash'] === 'string' || data['CodeHash'] instanceof String)) {
            throw new Error("Expected the field `CodeHash` to be a primitive type in the JSON string but got " + data['CodeHash']);
        }
        // ensure the json data is a string
        if (data['Nonce'] && !(typeof data['Nonce'] === 'string' || data['Nonce'] instanceof String)) {
            throw new Error("Expected the field `Nonce` to be a primitive type in the JSON string but got " + data['Nonce']);
        }
        // ensure the json data is a string
        if (data['StorageHash'] && !(typeof data['StorageHash'] === 'string' || data['StorageHash'] instanceof String)) {
            throw new Error("Expected the field `StorageHash` to be a primitive type in the JSON string but got " + data['StorageHash']);
        }
        if (data['StorageProof']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['StorageProof'])) {
                throw new Error("Expected the field `StorageProof` to be an array in the JSON data but got " + data['StorageProof']);
            }
            // validate the optional field `StorageProof` (array)
            for (const item of data['StorageProof']) {
                ResponseStorageEntry.validateJSON(item);
            };
        }

        return true;
    }


}

OutputGetProof.RequiredProperties = ["AccountProof", "Address", "Balance", "CodeHash", "Nonce", "StorageHash", "StorageProof"];

/**
 * A URL to the JSON Schema for this object.
 * @member {String} $schema
 */
OutputGetProof.prototype['$schema'] = undefined;

/**
 * An array of rlp-serialized MerkleTree-Nodes which starts with the stateRoot-Node and follows the path of the SHA3 address as key
 * @member {String} AccountProof
 */
OutputGetProof.prototype['AccountProof'] = undefined;

/**
 * The address associated with the account
 * @member {String} Address
 */
OutputGetProof.prototype['Address'] = undefined;

/**
 * The current balance of the account in wei
 * @member {String} Balance
 */
OutputGetProof.prototype['Balance'] = undefined;

/**
 * A 32 byte hash of the code of the account
 * @member {String} CodeHash
 */
OutputGetProof.prototype['CodeHash'] = undefined;

/**
 * The hash of the generated proof-of-work. Null if pending
 * @member {String} Nonce
 */
OutputGetProof.prototype['Nonce'] = undefined;

/**
 * A 32 byte SHA3 of the storageRoot. All storage will deliver a MerkleProof starting with this rootHash
 * @member {String} StorageHash
 */
OutputGetProof.prototype['StorageHash'] = undefined;

/**
 * An array of storage-entries as requested. Each entry is an object with the following fields:
 * @member {Array.<module:model/ResponseStorageEntry>} StorageProof
 */
OutputGetProof.prototype['StorageProof'] = undefined;






export default OutputGetProof;

