/**
 * QAN AutoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResponseWithdrawals model module.
 * @module model/ResponseWithdrawals
 * @version 0.0.1
 */
class ResponseWithdrawals {
    /**
     * Constructs a new <code>ResponseWithdrawals</code>.
     * @alias module:model/ResponseWithdrawals
     * @param address {String} The address to which the withdrawn amount is sent
     * @param amount {String} The amount of ether, provided in decimal format, corresponding to a certain value in gwei
     * @param index {Number} The index of the withdrawal to uniquely identify each withdrawal
     * @param validatorIndex {Number} The index of the validator who initiated the withdrawal
     */
    constructor(address, amount, index, validatorIndex) { 
        
        ResponseWithdrawals.initialize(this, address, amount, index, validatorIndex);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, amount, index, validatorIndex) { 
        obj['Address'] = address;
        obj['Amount'] = amount;
        obj['Index'] = index;
        obj['ValidatorIndex'] = validatorIndex;
    }

    /**
     * Constructs a <code>ResponseWithdrawals</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResponseWithdrawals} obj Optional instance to populate.
     * @return {module:model/ResponseWithdrawals} The populated <code>ResponseWithdrawals</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResponseWithdrawals();

            if (data.hasOwnProperty('Address')) {
                obj['Address'] = ApiClient.convertToType(data['Address'], 'String');
            }
            if (data.hasOwnProperty('Amount')) {
                obj['Amount'] = ApiClient.convertToType(data['Amount'], 'String');
            }
            if (data.hasOwnProperty('Index')) {
                obj['Index'] = ApiClient.convertToType(data['Index'], 'Number');
            }
            if (data.hasOwnProperty('ValidatorIndex')) {
                obj['ValidatorIndex'] = ApiClient.convertToType(data['ValidatorIndex'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResponseWithdrawals</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResponseWithdrawals</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResponseWithdrawals.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Address'] && !(typeof data['Address'] === 'string' || data['Address'] instanceof String)) {
            throw new Error("Expected the field `Address` to be a primitive type in the JSON string but got " + data['Address']);
        }
        // ensure the json data is a string
        if (data['Amount'] && !(typeof data['Amount'] === 'string' || data['Amount'] instanceof String)) {
            throw new Error("Expected the field `Amount` to be a primitive type in the JSON string but got " + data['Amount']);
        }

        return true;
    }


}

ResponseWithdrawals.RequiredProperties = ["Address", "Amount", "Index", "ValidatorIndex"];

/**
 * The address to which the withdrawn amount is sent
 * @member {String} Address
 */
ResponseWithdrawals.prototype['Address'] = undefined;

/**
 * The amount of ether, provided in decimal format, corresponding to a certain value in gwei
 * @member {String} Amount
 */
ResponseWithdrawals.prototype['Amount'] = undefined;

/**
 * The index of the withdrawal to uniquely identify each withdrawal
 * @member {Number} Index
 */
ResponseWithdrawals.prototype['Index'] = undefined;

/**
 * The index of the validator who initiated the withdrawal
 * @member {Number} ValidatorIndex
 */
ResponseWithdrawals.prototype['ValidatorIndex'] = undefined;






export default ResponseWithdrawals;

