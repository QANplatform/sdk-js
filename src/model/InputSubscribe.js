/**
 * QAN AutoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InputSubscribe model module.
 * @module model/InputSubscribe
 * @version 0.0.1
 */
class InputSubscribe {
    /**
     * Constructs a new <code>InputSubscribe</code>.
     * @alias module:model/InputSubscribe
     * @param data {Object} 
     * @param flag {Boolean} If true, method will return the full transaction data, otherwise only the transaction hash
     * @param subscriptionName {String} The type of event you want to subscribe to (i.e., newHeads, logs, newPendingTransactions)
     */
    constructor(data, flag, subscriptionName) { 
        
        InputSubscribe.initialize(this, data, flag, subscriptionName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, flag, subscriptionName) { 
        obj['Data'] = data;
        obj['Flag'] = flag || false;
        obj['SubscriptionName'] = subscriptionName;
    }

    /**
     * Constructs a <code>InputSubscribe</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputSubscribe} obj Optional instance to populate.
     * @return {module:model/InputSubscribe} The populated <code>InputSubscribe</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputSubscribe();

            if (data.hasOwnProperty('$schema')) {
                obj['$schema'] = ApiClient.convertToType(data['$schema'], 'String');
            }
            if (data.hasOwnProperty('Data')) {
                obj['Data'] = ApiClient.convertToType(data['Data'], Object);
            }
            if (data.hasOwnProperty('Flag')) {
                obj['Flag'] = ApiClient.convertToType(data['Flag'], 'Boolean');
            }
            if (data.hasOwnProperty('SubscriptionName')) {
                obj['SubscriptionName'] = ApiClient.convertToType(data['SubscriptionName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputSubscribe</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputSubscribe</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InputSubscribe.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['$schema'] && !(typeof data['$schema'] === 'string' || data['$schema'] instanceof String)) {
            throw new Error("Expected the field `$schema` to be a primitive type in the JSON string but got " + data['$schema']);
        }
        // ensure the json data is a string
        if (data['SubscriptionName'] && !(typeof data['SubscriptionName'] === 'string' || data['SubscriptionName'] instanceof String)) {
            throw new Error("Expected the field `SubscriptionName` to be a primitive type in the JSON string but got " + data['SubscriptionName']);
        }

        return true;
    }


}

InputSubscribe.RequiredProperties = ["Data", "Flag", "SubscriptionName"];

/**
 * A URL to the JSON Schema for this object.
 * @member {String} $schema
 */
InputSubscribe.prototype['$schema'] = undefined;

/**
 * @member {Object} Data
 */
InputSubscribe.prototype['Data'] = undefined;

/**
 * If true, method will return the full transaction data, otherwise only the transaction hash
 * @member {Boolean} Flag
 * @default false
 */
InputSubscribe.prototype['Flag'] = false;

/**
 * The type of event you want to subscribe to (i.e., newHeads, logs, newPendingTransactions)
 * @member {String} SubscriptionName
 */
InputSubscribe.prototype['SubscriptionName'] = undefined;






export default InputSubscribe;

