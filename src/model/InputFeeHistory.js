/**
 * QAN AutoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InputFeeHistory model module.
 * @module model/InputFeeHistory
 * @version 0.0.1
 */
class InputFeeHistory {
    /**
     * Constructs a new <code>InputFeeHistory</code>.
     * @alias module:model/InputFeeHistory
     * @param blockCount {Number} The number of blocks in the requested range. Between 1 and 1024 blocks can be requested in a single query. It will return less than the requested range if not all blocks are available
     * @param newestBlock {String} The highest number block of the requested range in hexadecimal format or tags. The supported tag values include earliest for the earliest/genesis block, latest for the latest mined block, pending for the pending state/transactions.
     * @param rewardPercentiles {Array.<Number>} A list of percentile values with a monotonic increase in value. The transactions will be ranked by effective tip per gas for each block in the requested range, and the corresponding effective tip for the percentile will be calculated while taking gas consumption into consideration
     */
    constructor(blockCount, newestBlock, rewardPercentiles) { 
        
        InputFeeHistory.initialize(this, blockCount, newestBlock, rewardPercentiles);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, blockCount, newestBlock, rewardPercentiles) { 
        obj['BlockCount'] = blockCount || 2;
        obj['NewestBlock'] = newestBlock || 'latest';
        obj['RewardPercentiles'] = rewardPercentiles;
    }

    /**
     * Constructs a <code>InputFeeHistory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputFeeHistory} obj Optional instance to populate.
     * @return {module:model/InputFeeHistory} The populated <code>InputFeeHistory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputFeeHistory();

            if (data.hasOwnProperty('$schema')) {
                obj['$schema'] = ApiClient.convertToType(data['$schema'], 'String');
            }
            if (data.hasOwnProperty('BlockCount')) {
                obj['BlockCount'] = ApiClient.convertToType(data['BlockCount'], 'Number');
            }
            if (data.hasOwnProperty('NewestBlock')) {
                obj['NewestBlock'] = ApiClient.convertToType(data['NewestBlock'], 'String');
            }
            if (data.hasOwnProperty('RewardPercentiles')) {
                obj['RewardPercentiles'] = ApiClient.convertToType(data['RewardPercentiles'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputFeeHistory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputFeeHistory</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InputFeeHistory.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['$schema'] && !(typeof data['$schema'] === 'string' || data['$schema'] instanceof String)) {
            throw new Error("Expected the field `$schema` to be a primitive type in the JSON string but got " + data['$schema']);
        }
        // ensure the json data is a string
        if (data['NewestBlock'] && !(typeof data['NewestBlock'] === 'string' || data['NewestBlock'] instanceof String)) {
            throw new Error("Expected the field `NewestBlock` to be a primitive type in the JSON string but got " + data['NewestBlock']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['RewardPercentiles'])) {
            throw new Error("Expected the field `RewardPercentiles` to be an array in the JSON data but got " + data['RewardPercentiles']);
        }

        return true;
    }


}

InputFeeHistory.RequiredProperties = ["BlockCount", "NewestBlock", "RewardPercentiles"];

/**
 * A URL to the JSON Schema for this object.
 * @member {String} $schema
 */
InputFeeHistory.prototype['$schema'] = undefined;

/**
 * The number of blocks in the requested range. Between 1 and 1024 blocks can be requested in a single query. It will return less than the requested range if not all blocks are available
 * @member {Number} BlockCount
 * @default 2
 */
InputFeeHistory.prototype['BlockCount'] = 2;

/**
 * The highest number block of the requested range in hexadecimal format or tags. The supported tag values include earliest for the earliest/genesis block, latest for the latest mined block, pending for the pending state/transactions.
 * @member {String} NewestBlock
 * @default 'latest'
 */
InputFeeHistory.prototype['NewestBlock'] = 'latest';

/**
 * A list of percentile values with a monotonic increase in value. The transactions will be ranked by effective tip per gas for each block in the requested range, and the corresponding effective tip for the percentile will be calculated while taking gas consumption into consideration
 * @member {Array.<Number>} RewardPercentiles
 */
InputFeeHistory.prototype['RewardPercentiles'] = undefined;






export default InputFeeHistory;

