/**
 * QAN AutoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import InputCall from '../model/InputCall';
import InputEstimateGas from '../model/InputEstimateGas';
import InputFeeHistory from '../model/InputFeeHistory';
import InputGetLogs from '../model/InputGetLogs';
import InputGetProof from '../model/InputGetProof';
import InputGetStorageAt from '../model/InputGetStorageAt';
import InputNewFilter from '../model/InputNewFilter';
import InputSendRawTransaction from '../model/InputSendRawTransaction';
import InputSubscribe from '../model/InputSubscribe';
import OutputAccounts from '../model/OutputAccounts';
import OutputBlobBaseFee from '../model/OutputBlobBaseFee';
import OutputBlockNumber from '../model/OutputBlockNumber';
import OutputCall from '../model/OutputCall';
import OutputChainId from '../model/OutputChainId';
import OutputEstimateGas from '../model/OutputEstimateGas';
import OutputFeeHistory from '../model/OutputFeeHistory';
import OutputGasPrice from '../model/OutputGasPrice';
import OutputGetAccount from '../model/OutputGetAccount';
import OutputGetBalance from '../model/OutputGetBalance';
import OutputGetBlockByHash from '../model/OutputGetBlockByHash';
import OutputGetBlockByNumber from '../model/OutputGetBlockByNumber';
import OutputGetBlockReceipts from '../model/OutputGetBlockReceipts';
import OutputGetBlockTransactionCountByHash from '../model/OutputGetBlockTransactionCountByHash';
import OutputGetBlockTransactionCountByNumber from '../model/OutputGetBlockTransactionCountByNumber';
import OutputGetCode from '../model/OutputGetCode';
import OutputGetFilterChanges from '../model/OutputGetFilterChanges';
import OutputGetFilterLogs from '../model/OutputGetFilterLogs';
import OutputGetLogs from '../model/OutputGetLogs';
import OutputGetProof from '../model/OutputGetProof';
import OutputGetStorageAt from '../model/OutputGetStorageAt';
import OutputGetTransactionByBlockHashAndIndex from '../model/OutputGetTransactionByBlockHashAndIndex';
import OutputGetTransactionByBlockNumberAndIndex from '../model/OutputGetTransactionByBlockNumberAndIndex';
import OutputGetTransactionByHash from '../model/OutputGetTransactionByHash';
import OutputGetTransactionCount from '../model/OutputGetTransactionCount';
import OutputGetTransactionReceipt from '../model/OutputGetTransactionReceipt';
import OutputGetUncleCountByBlockHash from '../model/OutputGetUncleCountByBlockHash';
import OutputGetUncleCountByBlockNumber from '../model/OutputGetUncleCountByBlockNumber';
import OutputMaxPriorityFeePerGas from '../model/OutputMaxPriorityFeePerGas';
import OutputNewBlockFilter from '../model/OutputNewBlockFilter';
import OutputNewFilter from '../model/OutputNewFilter';
import OutputNewPendingTransactionFilter from '../model/OutputNewPendingTransactionFilter';
import OutputSendRawTransaction from '../model/OutputSendRawTransaction';
import OutputSubscribe from '../model/OutputSubscribe';
import OutputSyncing from '../model/OutputSyncing';
import OutputUninstallFilter from '../model/OutputUninstallFilter';
import OutputUnsubscribe from '../model/OutputUnsubscribe';
import QanXlinkValidResponse from '../model/QanXlinkValidResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 0.0.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the qanAccounts operation.
     * @callback module:api/DefaultApi~qanAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputAccounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of addresses owned by client.
     * @param {module:api/DefaultApi~qanAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputAccounts}
     */
    qanAccounts(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputAccounts;
      return this.apiClient.callApi(
        '/accounts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanBlobBaseFee operation.
     * @callback module:api/DefaultApi~qanBlobBaseFeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputBlobBaseFee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the expected base fee for blobs in the next block.
     * @param {module:api/DefaultApi~qanBlobBaseFeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputBlobBaseFee}
     */
    qanBlobBaseFee(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputBlobBaseFee;
      return this.apiClient.callApi(
        '/blobBaseFee/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanBlockNumber operation.
     * @callback module:api/DefaultApi~qanBlockNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputBlockNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the latest block number of the blockchain.
     * @param {module:api/DefaultApi~qanBlockNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputBlockNumber}
     */
    qanBlockNumber(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputBlockNumber;
      return this.apiClient.callApi(
        '/blockNumber/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanCall operation.
     * @callback module:api/DefaultApi~qanCallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputCall} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes a new message call immediately without creating a transaction on the block chain.
     * @param {module:model/InputCall} inputCall 
     * @param {module:api/DefaultApi~qanCallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputCall}
     */
    qanCall(inputCall, callback) {
      let postBody = inputCall;
      // verify the required parameter 'inputCall' is set
      if (inputCall === undefined || inputCall === null) {
        throw new Error("Missing the required parameter 'inputCall' when calling qanCall");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputCall;
      return this.apiClient.callApi(
        '/call/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanChainId operation.
     * @callback module:api/DefaultApi~qanChainIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputChainId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the current network/chain ID, used to sign replay-protected transaction introduced in EIP-155.
     * @param {module:api/DefaultApi~qanChainIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputChainId}
     */
    qanChainId(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputChainId;
      return this.apiClient.callApi(
        '/chainId/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanEstimateGas operation.
     * @callback module:api/DefaultApi~qanEstimateGasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputEstimateGas} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an estimation of gas for a given transaction.
     * @param {module:model/InputEstimateGas} inputEstimateGas 
     * @param {module:api/DefaultApi~qanEstimateGasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputEstimateGas}
     */
    qanEstimateGas(inputEstimateGas, callback) {
      let postBody = inputEstimateGas;
      // verify the required parameter 'inputEstimateGas' is set
      if (inputEstimateGas === undefined || inputEstimateGas === null) {
        throw new Error("Missing the required parameter 'inputEstimateGas' when calling qanEstimateGas");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputEstimateGas;
      return this.apiClient.callApi(
        '/estimateGas/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanFeeHistory operation.
     * @callback module:api/DefaultApi~qanFeeHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputFeeHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the collection of historical gas information.
     * @param {module:model/InputFeeHistory} inputFeeHistory 
     * @param {module:api/DefaultApi~qanFeeHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputFeeHistory}
     */
    qanFeeHistory(inputFeeHistory, callback) {
      let postBody = inputFeeHistory;
      // verify the required parameter 'inputFeeHistory' is set
      if (inputFeeHistory === undefined || inputFeeHistory === null) {
        throw new Error("Missing the required parameter 'inputFeeHistory' when calling qanFeeHistory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputFeeHistory;
      return this.apiClient.callApi(
        '/feeHistory/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGasPrice operation.
     * @callback module:api/DefaultApi~qanGasPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGasPrice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the current gas price on the network in wei.
     * @param {module:api/DefaultApi~qanGasPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGasPrice}
     */
    qanGasPrice(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGasPrice;
      return this.apiClient.callApi(
        '/gasPrice/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetAccount operation.
     * @callback module:api/DefaultApi~qanGetAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves account details by specifying an address and a block number/tag.
     * @param {String} address The account address for which the information is to be retrieved
     * @param {String} blockReference The block number in hexadecimal or decimal format or the string latest, earliest, pending, see the default block parameter description in the official Ethereum documentation
     * @param {module:api/DefaultApi~qanGetAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetAccount}
     */
    qanGetAccount(address, blockReference, callback) {
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling qanGetAccount");
      }
      // verify the required parameter 'blockReference' is set
      if (blockReference === undefined || blockReference === null) {
        throw new Error("Missing the required parameter 'blockReference' when calling qanGetAccount");
      }

      let pathParams = {
        'Address': address,
        'BlockReference': blockReference
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetAccount;
      return this.apiClient.callApi(
        '/getAccount/{Address}/{BlockReference}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetBalance operation.
     * @callback module:api/DefaultApi~qanGetBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetBalance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the balance of the account of given address.
     * @param {String} address A 20 bytes long hexadecimal value representing an Ethereum address
     * @param {Object} opts Optional parameters
     * @param {String} [blockNumber = 'latest')] The block number in hexadecimal or decimal format or the string latest, earliest, pending, see the default block parameter description in the official Ethereum documentation
     * @param {module:api/DefaultApi~qanGetBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetBalance}
     */
    qanGetBalance(address, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling qanGetBalance");
      }

      let pathParams = {
        'Address': address
      };
      let queryParams = {
        'BlockNumber': opts['blockNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetBalance;
      return this.apiClient.callApi(
        '/getBalance/{Address}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetBlockByHash operation.
     * @callback module:api/DefaultApi~qanGetBlockByHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetBlockByHash} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information of the block matching the given block hash.
     * @param {String} hash The hash (32 bytes) of the block
     * @param {Boolean} transactionDetailFlag The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions
     * @param {module:api/DefaultApi~qanGetBlockByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetBlockByHash}
     */
    qanGetBlockByHash(hash, transactionDetailFlag, callback) {
      let postBody = null;
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling qanGetBlockByHash");
      }
      // verify the required parameter 'transactionDetailFlag' is set
      if (transactionDetailFlag === undefined || transactionDetailFlag === null) {
        throw new Error("Missing the required parameter 'transactionDetailFlag' when calling qanGetBlockByHash");
      }

      let pathParams = {
        'Hash': hash,
        'TransactionDetailFlag': transactionDetailFlag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetBlockByHash;
      return this.apiClient.callApi(
        '/getBlockByHash/{Hash}/{TransactionDetailFlag}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetBlockByNumber operation.
     * @callback module:api/DefaultApi~qanGetBlockByNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetBlockByNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information of the block matching the given block number.
     * @param {String} blockNumber The block number in hexadecimal or decimal format or the string latest, earliest, pending, see the default block parameter description in the official Ethereum documentation
     * @param {Boolean} transactionDetailFlag The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions
     * @param {module:api/DefaultApi~qanGetBlockByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetBlockByNumber}
     */
    qanGetBlockByNumber(blockNumber, transactionDetailFlag, callback) {
      let postBody = null;
      // verify the required parameter 'blockNumber' is set
      if (blockNumber === undefined || blockNumber === null) {
        throw new Error("Missing the required parameter 'blockNumber' when calling qanGetBlockByNumber");
      }
      // verify the required parameter 'transactionDetailFlag' is set
      if (transactionDetailFlag === undefined || transactionDetailFlag === null) {
        throw new Error("Missing the required parameter 'transactionDetailFlag' when calling qanGetBlockByNumber");
      }

      let pathParams = {
        'BlockNumber': blockNumber,
        'TransactionDetailFlag': transactionDetailFlag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetBlockByNumber;
      return this.apiClient.callApi(
        '/getBlockByNumber/{BlockNumber}/{TransactionDetailFlag}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetBlockReceipts operation.
     * @callback module:api/DefaultApi~qanGetBlockReceiptsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetBlockReceipts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all transaction receipts for a given block.
     * @param {String} blockNumber The block number in hexadecimal or decimal format or the string latest, earliest, pending, see the default block parameter description in the official Ethereum documentation
     * @param {module:api/DefaultApi~qanGetBlockReceiptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetBlockReceipts}
     */
    qanGetBlockReceipts(blockNumber, callback) {
      let postBody = null;
      // verify the required parameter 'blockNumber' is set
      if (blockNumber === undefined || blockNumber === null) {
        throw new Error("Missing the required parameter 'blockNumber' when calling qanGetBlockReceipts");
      }

      let pathParams = {
        'BlockNumber': blockNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetBlockReceipts;
      return this.apiClient.callApi(
        '/getBlockReceipts/{BlockNumber}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetBlockTransactionCountByHash operation.
     * @callback module:api/DefaultApi~qanGetBlockTransactionCountByHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetBlockTransactionCountByHash} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the number of transactions for the block matching the given block hash.
     * @param {String} hash The hash of the block
     * @param {module:api/DefaultApi~qanGetBlockTransactionCountByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetBlockTransactionCountByHash}
     */
    qanGetBlockTransactionCountByHash(hash, callback) {
      let postBody = null;
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling qanGetBlockTransactionCountByHash");
      }

      let pathParams = {
        'Hash': hash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetBlockTransactionCountByHash;
      return this.apiClient.callApi(
        '/getBlockTransactionCountByHash/{Hash}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetBlockTransactionCountByNumber operation.
     * @callback module:api/DefaultApi~qanGetBlockTransactionCountByNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetBlockTransactionCountByNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the number of transactions for the block matching the given block number.
     * @param {String} blockNumber The block number in hexadecimal or decimal format or the string latest, earliest, pending, see the default block parameter description in the official Ethereum documentation
     * @param {module:api/DefaultApi~qanGetBlockTransactionCountByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetBlockTransactionCountByNumber}
     */
    qanGetBlockTransactionCountByNumber(blockNumber, callback) {
      let postBody = null;
      // verify the required parameter 'blockNumber' is set
      if (blockNumber === undefined || blockNumber === null) {
        throw new Error("Missing the required parameter 'blockNumber' when calling qanGetBlockTransactionCountByNumber");
      }

      let pathParams = {
        'BlockNumber': blockNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetBlockTransactionCountByNumber;
      return this.apiClient.callApi(
        '/getBlockTransactionCountByNumber/{BlockNumber}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetCode operation.
     * @callback module:api/DefaultApi~qanGetCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the compiled bytecode of a smart contract.
     * @param {String} address The address of the smart contract from which the bytecode will be obtained
     * @param {Object} opts Optional parameters
     * @param {String} [blockNumber = 'latest')] The block number in hexadecimal or decimal format or the string latest, earliest, pending, see the default block parameter description in the official Ethereum documentation
     * @param {module:api/DefaultApi~qanGetCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetCode}
     */
    qanGetCode(address, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling qanGetCode");
      }

      let pathParams = {
        'Address': address
      };
      let queryParams = {
        'BlockNumber': opts['blockNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetCode;
      return this.apiClient.callApi(
        '/getCode/{Address}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetFilterChanges operation.
     * @callback module:api/DefaultApi~qanGetFilterChangesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetFilterChanges} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Polling method for a filter, which returns an array of events that have occurred since the last poll.
     * @param {String} filterId The filter id that is returned from eth_newFilter, eth_newBlockFilter or eth_newPendingTransactionFilter
     * @param {module:api/DefaultApi~qanGetFilterChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetFilterChanges}
     */
    qanGetFilterChanges(filterId, callback) {
      let postBody = null;
      // verify the required parameter 'filterId' is set
      if (filterId === undefined || filterId === null) {
        throw new Error("Missing the required parameter 'filterId' when calling qanGetFilterChanges");
      }

      let pathParams = {
        'FilterId': filterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetFilterChanges;
      return this.apiClient.callApi(
        '/getFilterChanges/{FilterId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetFilterLogs operation.
     * @callback module:api/DefaultApi~qanGetFilterLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetFilterLogs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of all logs matching filter with given id.
     * @param {String} id The filter ID
     * @param {module:api/DefaultApi~qanGetFilterLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetFilterLogs}
     */
    qanGetFilterLogs(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling qanGetFilterLogs");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetFilterLogs;
      return this.apiClient.callApi(
        '/getFilterLogs/{Id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetLogs operation.
     * @callback module:api/DefaultApi~qanGetLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetLogs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of all logs matching a given filter object.
     * @param {module:model/InputGetLogs} inputGetLogs 
     * @param {module:api/DefaultApi~qanGetLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetLogs}
     */
    qanGetLogs(inputGetLogs, callback) {
      let postBody = inputGetLogs;
      // verify the required parameter 'inputGetLogs' is set
      if (inputGetLogs === undefined || inputGetLogs === null) {
        throw new Error("Missing the required parameter 'inputGetLogs' when calling qanGetLogs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetLogs;
      return this.apiClient.callApi(
        '/getLogs/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetProof operation.
     * @callback module:api/DefaultApi~qanGetProofCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetProof} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the account and storage values of the specified account including the Merkle-proof.
     * @param {module:model/InputGetProof} inputGetProof 
     * @param {module:api/DefaultApi~qanGetProofCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetProof}
     */
    qanGetProof(inputGetProof, callback) {
      let postBody = inputGetProof;
      // verify the required parameter 'inputGetProof' is set
      if (inputGetProof === undefined || inputGetProof === null) {
        throw new Error("Missing the required parameter 'inputGetProof' when calling qanGetProof");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetProof;
      return this.apiClient.callApi(
        '/getProof/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetStorageAt operation.
     * @callback module:api/DefaultApi~qanGetStorageAtCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetStorageAt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the value from a storage position at a given address.
     * @param {module:model/InputGetStorageAt} inputGetStorageAt 
     * @param {module:api/DefaultApi~qanGetStorageAtCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetStorageAt}
     */
    qanGetStorageAt(inputGetStorageAt, callback) {
      let postBody = inputGetStorageAt;
      // verify the required parameter 'inputGetStorageAt' is set
      if (inputGetStorageAt === undefined || inputGetStorageAt === null) {
        throw new Error("Missing the required parameter 'inputGetStorageAt' when calling qanGetStorageAt");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetStorageAt;
      return this.apiClient.callApi(
        '/getStorageAt/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetTransactionByBlockHashAndIndex operation.
     * @callback module:api/DefaultApi~qanGetTransactionByBlockHashAndIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetTransactionByBlockHashAndIndex} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a transaction given a blockhash and transaction index position.
     * @param {String} blockHash 
     * @param {String} index An integer of the transaction index position
     * @param {module:api/DefaultApi~qanGetTransactionByBlockHashAndIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetTransactionByBlockHashAndIndex}
     */
    qanGetTransactionByBlockHashAndIndex(blockHash, index, callback) {
      let postBody = null;
      // verify the required parameter 'blockHash' is set
      if (blockHash === undefined || blockHash === null) {
        throw new Error("Missing the required parameter 'blockHash' when calling qanGetTransactionByBlockHashAndIndex");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling qanGetTransactionByBlockHashAndIndex");
      }

      let pathParams = {
        'blockHash': blockHash,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetTransactionByBlockHashAndIndex;
      return this.apiClient.callApi(
        '/getTransactionByBlockHashAndIndex/{blockHash}/{index}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetTransactionByBlockNumberAndIndex operation.
     * @callback module:api/DefaultApi~qanGetTransactionByBlockNumberAndIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetTransactionByBlockNumberAndIndex} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a transaction given a block number and transaction index position.
     * @param {String} blockNumber The block number in hexadecimal or decimal format or the string latest, earliest, pending, see the default block parameter description in the official Ethereum documentation
     * @param {String} index An integer of the transaction index position
     * @param {module:api/DefaultApi~qanGetTransactionByBlockNumberAndIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetTransactionByBlockNumberAndIndex}
     */
    qanGetTransactionByBlockNumberAndIndex(blockNumber, index, callback) {
      let postBody = null;
      // verify the required parameter 'blockNumber' is set
      if (blockNumber === undefined || blockNumber === null) {
        throw new Error("Missing the required parameter 'blockNumber' when calling qanGetTransactionByBlockNumberAndIndex");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling qanGetTransactionByBlockNumberAndIndex");
      }

      let pathParams = {
        'blockNumber': blockNumber,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetTransactionByBlockNumberAndIndex;
      return this.apiClient.callApi(
        '/getTransactionByBlockNumberAndIndex/{blockNumber}/{index}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetTransactionByHash operation.
     * @callback module:api/DefaultApi~qanGetTransactionByHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetTransactionByHash} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the information about a transaction from a transaction hash.
     * @param {String} hash The hash of a transaction
     * @param {module:api/DefaultApi~qanGetTransactionByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetTransactionByHash}
     */
    qanGetTransactionByHash(hash, callback) {
      let postBody = null;
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling qanGetTransactionByHash");
      }

      let pathParams = {
        'hash': hash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetTransactionByHash;
      return this.apiClient.callApi(
        '/getTransactionByHash/{hash}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetTransactionCount operation.
     * @callback module:api/DefaultApi~qanGetTransactionCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetTransactionCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the number of transactions sent from an address.
     * @param {String} address The address from which the transaction count to be checked
     * @param {String} blockNumber The block number in hexadecimal or decimal format or the string latest, earliest, pending, see the default block parameter description in the official Ethereum documentation
     * @param {module:api/DefaultApi~qanGetTransactionCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetTransactionCount}
     */
    qanGetTransactionCount(address, blockNumber, callback) {
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling qanGetTransactionCount");
      }
      // verify the required parameter 'blockNumber' is set
      if (blockNumber === undefined || blockNumber === null) {
        throw new Error("Missing the required parameter 'blockNumber' when calling qanGetTransactionCount");
      }

      let pathParams = {
        'Address': address,
        'BlockNumber': blockNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetTransactionCount;
      return this.apiClient.callApi(
        '/getTransactionCount/{Address}/{BlockNumber}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetTransactionReceipt operation.
     * @callback module:api/DefaultApi~qanGetTransactionReceiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetTransactionReceipt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the receipt of a transaction by transaction hash.
     * @param {String} hash The hash of a transaction
     * @param {module:api/DefaultApi~qanGetTransactionReceiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetTransactionReceipt}
     */
    qanGetTransactionReceipt(hash, callback) {
      let postBody = null;
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling qanGetTransactionReceipt");
      }

      let pathParams = {
        'Hash': hash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetTransactionReceipt;
      return this.apiClient.callApi(
        '/getTransactionReceipt/{Hash}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetUncleCountByBlockHash operation.
     * @callback module:api/DefaultApi~qanGetUncleCountByBlockHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetUncleCountByBlockHash} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the number of uncles for the block matching the given block hash.
     * @param {String} hash The hash of the block to get uncles for
     * @param {module:api/DefaultApi~qanGetUncleCountByBlockHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetUncleCountByBlockHash}
     */
    qanGetUncleCountByBlockHash(hash, callback) {
      let postBody = null;
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling qanGetUncleCountByBlockHash");
      }

      let pathParams = {
        'Hash': hash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetUncleCountByBlockHash;
      return this.apiClient.callApi(
        '/getUncleCountByBlockHash/{Hash}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanGetUncleCountByBlockNumber operation.
     * @callback module:api/DefaultApi~qanGetUncleCountByBlockNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputGetUncleCountByBlockNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the number of uncles for the block matching the given block number.
     * @param {String} blockNumber The block number in hexadecimal or decimal format or the string latest, earliest, pending, see the default block parameter description in the official Ethereum documentation
     * @param {module:api/DefaultApi~qanGetUncleCountByBlockNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputGetUncleCountByBlockNumber}
     */
    qanGetUncleCountByBlockNumber(blockNumber, callback) {
      let postBody = null;
      // verify the required parameter 'blockNumber' is set
      if (blockNumber === undefined || blockNumber === null) {
        throw new Error("Missing the required parameter 'blockNumber' when calling qanGetUncleCountByBlockNumber");
      }

      let pathParams = {
        'BlockNumber': blockNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputGetUncleCountByBlockNumber;
      return this.apiClient.callApi(
        '/getUncleCountByBlockNumber/{BlockNumber}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanMaxPriorityFeePerGas operation.
     * @callback module:api/DefaultApi~qanMaxPriorityFeePerGasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputMaxPriorityFeePerGas} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the priority fee needed to be included in a block.
     * @param {module:api/DefaultApi~qanMaxPriorityFeePerGasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputMaxPriorityFeePerGas}
     */
    qanMaxPriorityFeePerGas(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputMaxPriorityFeePerGas;
      return this.apiClient.callApi(
        '/maxPriorityFeePerGas/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanNewBlockFilter operation.
     * @callback module:api/DefaultApi~qanNewBlockFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNewBlockFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a filter in the node, to notify when a new block arrives.
     * @param {module:api/DefaultApi~qanNewBlockFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNewBlockFilter}
     */
    qanNewBlockFilter(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputNewBlockFilter;
      return this.apiClient.callApi(
        '/newBlockFilter/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanNewFilter operation.
     * @callback module:api/DefaultApi~qanNewFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNewFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a filter object, based on filter options, to notify when the state changes (logs).
     * @param {module:model/InputNewFilter} inputNewFilter 
     * @param {module:api/DefaultApi~qanNewFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNewFilter}
     */
    qanNewFilter(inputNewFilter, callback) {
      let postBody = inputNewFilter;
      // verify the required parameter 'inputNewFilter' is set
      if (inputNewFilter === undefined || inputNewFilter === null) {
        throw new Error("Missing the required parameter 'inputNewFilter' when calling qanNewFilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputNewFilter;
      return this.apiClient.callApi(
        '/newFilter/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanNewPendingTransactionFilter operation.
     * @callback module:api/DefaultApi~qanNewPendingTransactionFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNewPendingTransactionFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a filter in the node to notify when new pending transactions arrive.
     * @param {module:api/DefaultApi~qanNewPendingTransactionFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNewPendingTransactionFilter}
     */
    qanNewPendingTransactionFilter(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputNewPendingTransactionFilter;
      return this.apiClient.callApi(
        '/newPendingTransactionFilter/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanSendRawTransaction operation.
     * @callback module:api/DefaultApi~qanSendRawTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputSendRawTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new message call transaction or a contract creation for signed transactions.
     * @param {module:model/InputSendRawTransaction} inputSendRawTransaction 
     * @param {module:api/DefaultApi~qanSendRawTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputSendRawTransaction}
     */
    qanSendRawTransaction(inputSendRawTransaction, callback) {
      let postBody = inputSendRawTransaction;
      // verify the required parameter 'inputSendRawTransaction' is set
      if (inputSendRawTransaction === undefined || inputSendRawTransaction === null) {
        throw new Error("Missing the required parameter 'inputSendRawTransaction' when calling qanSendRawTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputSendRawTransaction;
      return this.apiClient.callApi(
        '/sendRawTransaction/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanSubscribe operation.
     * @callback module:api/DefaultApi~qanSubscribeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputSubscribe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a subscription to a specific event.
     * @param {module:model/InputSubscribe} inputSubscribe 
     * @param {module:api/DefaultApi~qanSubscribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputSubscribe}
     */
    qanSubscribe(inputSubscribe, callback) {
      let postBody = inputSubscribe;
      // verify the required parameter 'inputSubscribe' is set
      if (inputSubscribe === undefined || inputSubscribe === null) {
        throw new Error("Missing the required parameter 'inputSubscribe' when calling qanSubscribe");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputSubscribe;
      return this.apiClient.callApi(
        '/subscribe/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanSyncing operation.
     * @callback module:api/DefaultApi~qanSyncingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputSyncing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an object with the sync status of the node if the node is out-of-sync and is syncing. Returns null when the node is already in sync.
     * @param {module:api/DefaultApi~qanSyncingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputSyncing}
     */
    qanSyncing(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputSyncing;
      return this.apiClient.callApi(
        '/syncing/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanUninstallFilter operation.
     * @callback module:api/DefaultApi~qanUninstallFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputUninstallFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uninstalls a filter with the given filter id.
     * @param {String} filterId The filter ID that needs to be uninstalled. It should always be called when watch is no longer needed. Additionally, Filters timeout when they aren't requested with eth_getFilterChanges for a period of time
     * @param {module:api/DefaultApi~qanUninstallFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputUninstallFilter}
     */
    qanUninstallFilter(filterId, callback) {
      let postBody = null;
      // verify the required parameter 'filterId' is set
      if (filterId === undefined || filterId === null) {
        throw new Error("Missing the required parameter 'filterId' when calling qanUninstallFilter");
      }

      let pathParams = {
        'FilterId': filterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputUninstallFilter;
      return this.apiClient.callApi(
        '/uninstallFilter/{FilterId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanUnsubscribe operation.
     * @callback module:api/DefaultApi~qanUnsubscribeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputUnsubscribe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels an existing subscription so that no further events are sent.
     * @param {String} subscriptionId A subscription ID that was previously generated in a eth_subscribe RPC request
     * @param {module:api/DefaultApi~qanUnsubscribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputUnsubscribe}
     */
    qanUnsubscribe(subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling qanUnsubscribe");
      }

      let pathParams = {
        'SubscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = OutputUnsubscribe;
      return this.apiClient.callApi(
        '/unsubscribe/{SubscriptionId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qanXlinkValid operation.
     * @callback module:api/DefaultApi~qanXlinkValidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QanXlinkValidResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~qanXlinkValidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QanXlinkValidResponse}
     */
    qanXlinkValid(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = QanXlinkValidResponse;
      return this.apiClient.callApi(
        '/xlinkValid/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
